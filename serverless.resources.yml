Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      Tags:
        - Key: Environment
          Value: ${self:custom.stage}
        - Key: Name
          Value: users-table
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireUppercase: false
          RequireSymbols: false
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: name
          Required: false
          Mutable: true
      LambdaConfig:
        PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

  UserPoolInvokeConfirmUserSignupLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref ConfirmUserSignupLambdaFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  WebUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: wen
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

Outputs:
  AwsRegion:
    Value: ${self:custom.region}

  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
